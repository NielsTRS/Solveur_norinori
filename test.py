from pysat.solvers import Glucose3
from pysat.formula import CNF


def threeSatFormat(n, clauses):
    """
    Permet de transformer les clauses de n-sat en 3-sat
    """
    maxvar = 5
    new_clauses = []
    for clause in clauses:
        size = len(clause)
        if size > 3:
            maxvar += 1  # variable supplémentaire
            new_clauses.append([clause[0], clause[1], maxvar])
            for i in range(2, size - 2):
                new_clause = []
                new_clause.append(-maxvar)
                new_clause.append(clause[i])
                maxvar += 1
                new_clause.append(maxvar)
                new_clauses.append(new_clause)
            new_clauses.append([-maxvar, clause[size - 2], clause[size - 1]])
        elif size == 2:
            maxvar += 1  # variable supplémentaire
            new_clauses.append([clause[0], clause[1], maxvar])
            new_clauses.append([clause[0], clause[1], -maxvar])
        elif size == 1:
            maxvar += 2
            y = maxvar - 1  # variable supplémentaire 1
            z = maxvar  # variable supplémentaire 2
            new_clauses.append([clause[0], y, z])
            new_clauses.append([clause[0], y, -z])
            new_clauses.append([clause[0], -y, z])
            new_clauses.append([clause[0], -y, -z])
        else:
            new_clauses.append(clause)

    return new_clauses


n = 4
# clauses = [[-1, 2, 5], [-1, -2, -5], [-2, 1, 3, 6], [-2, -1, -3], [-2, -1, -6], [-2, -3, -6], [-3, 2, 4, 7], [-3, -2, -4], [-3, -2, -7], [-3, -4, -7], [-4, 3, 8], [-4, -3, -8], [-5, 9, 6, 1], [-5, -9, -6], [-5, -9, -1], [-5, -6, -1], [-6, -2, -5], [-6, -2, -7], [-6, -2, -10], [-6, 2, 5, 7, 10], [-6, -5, -7], [-6, -5, -10], [-6, -7, -10], [-7, -3, -6], [-7, -3, -8], [-7, -3], [-7, -6, -8], [-7, -6], [-7, -8], [-8, 12, 7, 4], [-8, -12, -7], [-8, -12, -4], [-8, -7, -4], [-9, 13, 10, 5], [-9, -13, -10], [-9, -13, -5], [-9, -10, -5], [-10, -6, -9], [-10, -6], [-10, -6, -14], [-10, -9], [-10, -9, -14], [-10, -14], [-7, -10], [-7, -12], [-7, -15], [7, 10, 12, 15], [-10, -12], [-10, -15], [-12, -15], [-12, -16], [-12, -16, -8], [-12, -8], [-13, 14, 9], [-13, -14, -9], [-14, 13, 15, 10], [-14, -13, -15], [-14, -13, -10], [-14, -15, -10], [-15, -14, -16], [-15, -14], [-15, -16], [-16, 15, 12], [-16, -15, -12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], [-1, -2, -3], [-1, -2, -4], [-1, -2, -5], [-1, -2, -6], [-1, -2, -7], [-1, -2, -8], [-1, -2, -9], [-1, -2, -10], [-1, -2], [-1, -2, -12], [-1, -2, -13], [-1, -2, -14], [-1, -2, -15], [-1, -2, -16], [-1, -3, -4], [-1, -3, -5], [-1, -3, -6], [-1, -3, -7], [-1, -3, -8], [-1, -3, -9], [-1, -3, -10], [-1, -3], [-1, -3, -12], [-1, -3, -13], [-1, -3, -14], [-1, -3, -15], [-1, -3, -16], [-1, -4, -5], [-1, -4, -6], [-1, -4, -7], [-1, -4, -8], [-1, -4, -9], [-1, -4, -10], [-1, -4], [-1, -4, -12], [-1, -4, -13], [-1, -4, -14], [-1, -4, -15], [-1, -4, -16], [-1, -5, -6], [-1, -5, -7], [-1, -5, -8], [-1, -5, -9], [-1, -5, -10], [-1, -5], [-1, -5, -12], [-1, -5, -13], [-1, -5, -14], [-1, -5, -15], [-1, -5, -16], [-1, -6, -7], [-1, -6, -8], [-1, -6, -9], [-1, -6, -10], [-1, -6], [-1, -6, -12], [-1, -6, -13], [-1, -6, -14], [-1, -6, -15], [-1, -6, -16], [-1, -7, -8], [-1, -7, -9], [-1, -7, -10], [-1, -7], [-1, -7, -12], [-1, -7, -13], [-1, -7, -14], [-1, -7, -15], [-1, -7, -16], [-1, -8, -9], [-1, -8, -10], [-1, -8], [-1, -8, -12], [-1, -8, -13], [-1, -8, -14], [-1, -8, -15], [-1, -8, -16], [-1, -9, -10], [-1, -9], [-1, -9, -12], [-1, -9, -13], [-1, -9, -14], [-1, -9, -15], [-1, -9, -16], [-1, -10], [-1, -10, -12], [-1, -10, -13], [-1, -10, -14], [-1, -10, -15], [-1, -10, -16], [-1, -12], [-1, -13], [-1, -14], [-1, -15], [-1, -16], [-1, -12, -13], [-1, -12, -14], [-1, -12, -15], [-1, -12, -16], [-1, -13, -14], [-1, -13, -15], [-1, -13, -16], [-1, -14, -15], [-1, -14, -16], [-1, -15, -16], [-2, -3, -4], [-2, -3, -5], [-2, -3, -6], [-2, -3, -7], [-2, -3, -8], [-2, -3, -9], [-2, -3, -10], [-2, -3], [-2, -3, -12], [-2, -3, -13], [-2, -3, -14], [-2, -3, -15], [-2, -3, -16], [-2, -4, -5], [-2, -4, -6], [-2, -4, -7], [-2, -4, -8], [-2, -4, -9], [-2, -4, -10], [-2, -4], [-2, -4, -12], [-2, -4, -13], [-2, -4, -14], [-2, -4, -15], [-2, -4, -16], [-2, -5, -6], [-2, -5, -7], [-2, -5, -8], [-2, -5, -9], [-2, -5, -10], [-2, -5], [-2, -5, -12], [-2, -5, -13], [-2, -5, -14], [-2, -5, -15], [-2, -5, -16], [-2, -6, -7], [-2, -6, -8], [-2, -6, -9], [-2, -6, -10], [-2, -6], [-2, -6, -12], [-2, -6, -13], [-2, -6, -14], [-2, -6, -15], [-2, -6, -16], [-2, -7, -8], [-2, -7, -9], [-2, -7, -10], [-2, -7], [-2, -7, -12], [-2, -7, -13], [-2, -7, -14], [-2, -7, -15], [-2, -7, -16], [-2, -8, -9], [-2, -8, -10], [-2, -8], [-2, -8, -12], [-2, -8, -13], [-2, -8, -14], [-2, -8, -15], [-2, -8, -16], [-2, -9, -10], [-2, -9], [-2, -9, -12], [-2, -9, -13], [-2, -9, -14], [-2, -9, -15], [-2, -9, -16], [-2, -10], [-2, -10, -12], [-2, -10, -13], [-2, -10, -14], [-2, -10, -15], [-2, -10, -16], [-2, -12], [-2, -13], [-2, -14], [-2, -15], [-2, -16], [-2, -12, -13], [-2, -12, -14], [-2, -12, -15], [-2, -12, -16], [-2, -13, -14], [-2, -13, -15], [-2, -13, -16], [-2, -14, -15], [-2, -14, -16], [-2, -15, -16], [-3, -4, -5], [-3, -4, -6], [-3, -4, -7], [-3, -4, -8], [-3, -4, -9], [-3, -4, -10], [-3, -4], [-3, -4, -12], [-3, -4, -13], [-3, -4, -14], [-3, -4, -15], [-3, -4, -16], [-3, -5, -6], [-3, -5, -7], [-3, -5, -8], [-3, -5, -9], [-3, -5, -10], [-3, -5], [-3, -5, -12], [-3, -5, -13], [-3, -5, -14], [-3, -5, -15], [-3, -5, -16], [-3, -6, -7], [-3, -6, -8], [-3, -6, -9], [-3, -6, -10], [-3, -6], [-3, -6, -12], [-3, -6, -13], [-3, -6, -14], [-3, -6, -15], [-3, -6, -16], [-3, -7, -8], [-3, -7, -9], [-3, -7, -10], [-3, -7], [-3, -7, -12], [-3, -7, -13], [-3, -7, -14], [-3, -7, -15], [-3, -7, -16], [-3, -8, -9], [-3, -8, -10], [-3, -8], [-3, -8, -12], [-3, -8, -13], [-3, -8, -14], [-3, -8, -15], [-3, -8, -16], [-3, -9, -10], [-3, -9], [-3, -9, -12], [-3, -9, -13], [-3, -9, -14], [-3, -9, -15], [-3, -9, -16], [-3, -10], [-3, -10, -12], [-3, -10, -13], [-3, -10, -14], [-3, -10, -15], [-3, -10, -16], [-3, -12], [-3, -13], [-3, -14], [-3, -15], [-3, -16], [-3, -12, -13], [-3, -12, -14], [-3, -12, -15], [-3, -12, -16], [-3, -13, -14], [-3, -13, -15], [-3, -13, -16], [-3, -14, -15], [-3, -14, -16], [-3, -15, -16], [-4, -5, -6], [-4, -5, -7], [-4, -5, -8], [-4, -5, -9], [-4, -5, -10], [-4, -5], [-4, -5, -12], [-4, -5, -13], [-4, -5, -14], [-4, -5, -15], [-4, -5, -16], [-4, -6, -7], [-4, -6, -8], [-4, -6, -9], [-4, -6, -10], [-4, -6], [-4, -6, -12], [-4, -6, -13], [-4, -6, -14], [-4, -6, -15], [-4, -6, -16], [-4, -7, -8], [-4, -7, -9], [-4, -7, -10], [-4, -7], [-4, -7, -12], [-4, -7, -13], [-4, -7, -14], [-4, -7, -15], [-4, -7, -16], [-4, -8, -9], [-4, -8, -10], [-4, -8], [-4, -8, -12], [-4, -8, -13], [-4, -8, -14], [-4, -8, -15], [-4, -8, -16], [-4, -9, -10], [-4, -9], [-4, -9, -12], [-4, -9, -13], [-4, -9, -14], [-4, -9, -15], [-4, -9, -16], [-4, -10], [-4, -10, -12], [-4, -10, -13], [-4, -10, -14], [-4, -10, -15], [-4, -10, -16], [-4, -12], [-4, -13], [-4, -14], [-4, -15], [-4, -16], [-4, -12, -13], [-4, -12, -14], [-4, -12, -15], [-4, -12, -16], [-4, -13, -14], [-4, -13, -15], [-4, -13, -16], [-4, -14, -15], [-4, -14, -16], [-4, -15, -16], [-5, -6, -7], [-5, -6, -8], [-5, -6, -9], [-5, -6, -10], [-5, -6], [-5, -6, -12], [-5, -6, -13], [-5, -6, -14], [-5, -6, -15], [-5, -6, -16], [-5, -7, -8], [-5, -7, -9], [-5, -7, -10], [-5, -7], [-5, -7, -12], [-5, -7, -13], [-5, -7, -14], [-5, -7, -15], [-5, -7, -16], [-5, -8, -9], [-5, -8, -10], [-5, -8], [-5, -8, -12], [-5, -8, -13], [-5, -8, -14], [-5, -8, -15], [-5, -8, -16], [-5, -9, -10], [-5, -9], [-5, -9, -12], [-5, -9, -13], [-5, -9, -14], [-5, -9, -15], [-5, -9, -16], [-5, -10], [-5, -10, -12], [-5, -10, -13], [-5, -10, -14], [-5, -10, -15], [-5, -10, -16], [-5, -12], [-5, -13], [-5, -14], [-5, -15], [-5, -16], [-5, -12, -13], [-5, -12, -14], [-5, -12, -15], [-5, -12, -16], [-5, -13, -14], [-5, -13, -15], [-5, -13, -16], [-5, -14, -15], [-5, -14, -16], [-5, -15, -16], [-6, -7, -8], [-6, -7, -9], [-6, -7, -10], [-6, -7], [-6, -7, -12], [-6, -7, -13], [-6, -7, -14], [-6, -7, -15], [-6, -7, -16], [-6, -8, -9], [-6, -8, -10], [-6, -8], [-6, -8, -12], [-6, -8, -13], [-6, -8, -14], [-6, -8, -15], [-6, -8, -16], [-6, -9, -10], [-6, -9], [-6, -9, -12], [-6, -9, -13], [-6, -9, -14], [-6, -9, -15], [-6, -9, -16], [-6, -10], [-6, -10, -12], [-6, -10, -13], [-6, -10, -14], [-6, -10, -15], [-6, -10, -16], [-6, -12], [-6, -13], [-6, -14], [-6, -15], [-6, -16], [-6, -12, -13], [-6, -12, -14], [-6, -12, -15], [-6, -12, -16], [-6, -13, -14], [-6, -13, -15], [-6, -13, -16], [-6, -14, -15], [-6, -14, -16], [-6, -15, -16], [-7, -8, -9], [-7, -8, -10], [-7, -8], [-7, -8, -12], [-7, -8, -13], [-7, -8, -14], [-7, -8, -15], [-7, -8, -16], [-7, -9, -10], [-7, -9], [-7, -9, -12], [-7, -9, -13], [-7, -9, -14], [-7, -9, -15], [-7, -9, -16], [-7, -10], [-7, -10, -12], [-7, -10, -13], [-7, -10, -14], [-7, -10, -15], [-7, -10, -16], [-7, -12], [-7, -13], [-7, -14], [-7, -15], [-7, -16], [-7, -12, -13], [-7, -12, -14], [-7, -12, -15], [-7, -12, -16], [-7, -13, -14], [-7, -13, -15], [-7, -13, -16], [-7, -14, -15], [-7, -14, -16], [-7, -15, -16], [-8, -9, -10], [-8, -9], [-8, -9, -12], [-8, -9, -13], [-8, -9, -14], [-8, -9, -15], [-8, -9, -16], [-8, -10], [-8, -10, -12], [-8, -10, -13], [-8, -10, -14], [-8, -10, -15], [-8, -10, -16], [-8, -12], [-8, -13], [-8, -14], [-8, -15], [-8, -16], [-8, -12, -13], [-8, -12, -14], [-8, -12, -15], [-8, -12, -16], [-8, -13, -14], [-8, -13, -15], [-8, -13, -16], [-8, -14, -15], [-8, -14, -16], [-8, -15, -16], [-9, -10], [-9, -10, -12], [-9, -10, -13], [-9, -10, -14], [-9, -10, -15], [-9, -10, -16], [-9, -12], [-9, -13], [-9, -14], [-9, -15], [-9, -16], [-9, -12, -13], [-9, -12, -14], [-9, -12, -15], [-9, -12, -16], [-9, -13, -14], [-9, -13, -15], [-9, -13, -16], [-9, -14, -15], [-9, -14, -16], [-9, -15, -16], [-10, -12], [-10, -13], [-10, -14], [-10, -15], [-10, -16], [-10, -12, -13], [-10, -12, -14], [-10, -12, -15], [-10, -12, -16], [-10, -13, -14], [-10, -13, -15], [-10, -13, -16], [-10, -14, -15], [-10, -14, -16], [-10, -15, -16], [-12, -13], [-12, -14], [-12, -15], [-12, -16], [-13, -14], [-13, -15], [-13, -16], [-14, -15], [-14, -16], [-15, -16], [-12, -13, -14], [-12, -13, -15], [-12, -13, -16], [-12, -14, -15], [-12, -14, -16], [-12, -15, -16], [-13, -14, -15], [-13, -14, -16], [-13, -15, -16], [-14, -15, -16]]

clauses = [[1, 2, 3, 4, 5]]
clauses = threeSatFormat(n, clauses)

text = ""
for clause in clauses:
    text += "("
    for id in clause:
        if id < 0:
            text += "not " + str(abs(id))
        else:
            text += str(id)
        text += " or "
    text = text[:-4]
    text += ") and "
text = text[:-5]
print(" ".join(text.split()))
